trigger: none
pr: none

parameters:
  - name: local_environments
    type: object
    default:
      - name: wanda
        address: "10.151.14.11"
  - name: environment_components
    type: object
    default:
      - deployment: k8s_infra
        environment: wanda
        component: kubernetes
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
      - deployment: k8s_prep_ansible
        environment: wanda
        envCheckStageName: CheckEnvIsOnline_wanda
        playbook: k3s-prep.yaml
        addresses: "10.151.15.8,10.151.15.9,10.151.15.10,10.151.15.16,10.151.15.17"
        deploy: false
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
          - k8s_infra
      - deployment: k8s_ansible
        environment: wanda
        envCheckStageName: CheckEnvIsOnline_wanda
        playbook: site.yml
        workingDirectory: ansible/k3s
        requirementsFile: collections/requirements.yml
        addresses: "10.151.15.8,10.151.15.9,10.151.15.10,10.151.15.16,10.151.15.17"
        deploy: false
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
          - k8s_prep_ansible
      #- deployment: rpi_k8s_prep_ansible
      #  environment: yggdrasil
      #  playbook: k3s-prep.yaml
      #  addresses: "10.151.16.8,10.151.16.16"
      #  deploy: false
      #  local: true
      #  dependsOn: []
      #- deployment: rpi_k8s_ansible
      #  environment: yggdrasil
      #  playbook: site.yml
      #  workingDirectory: ansible/k3s
      #  requirementsFile: collections/requirements.yml
      #  addresses: "10.151.16.8,10.151.16.16"
      #  deploy: false
      #  local: true
      #  dependsOn:
      #    - rpi_k8s_prep_ansible

variables:
  - name: agentImage
    value: ubuntu-20.04

stages:
  - ${{ each env in parameters.local_environments }}:
      - stage: CheckEnvIsOnline_${{ env.name }}
        dependsOn: []
        jobs:
          - job: CheckEnvIsOnline
            pool:
              name: Local
            steps:
              - template: pipelines/check-host-online.yaml
                parameters:
                  addresses: ${{ env.address }}
  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        jobs:
          - ${{ if ne(deployment.component, '') }}:
              - job: TerraformPlan
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: Local
                  ${{ else }}:
                    vmImage: $(agentImage)
                steps:
                  - template: pipelines/terraform-init.yaml
                    parameters:
                      storageAccount: ${{ deployment.storageAccount}}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      azureRmKey: ${{ deployment.deployment }}
                  - template: pipelines/terraform-plan.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
              - job: TerraformApply
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: Local
                  ${{ else }}:
                    vmImage: $(agentImage)
                steps:
                  - template: pipelines/terraform-init.yaml
                    parameters:
                      storageAccount: ${{ deployment.storageAccount}}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      azureRmKey: ${{ deployment.deployment }}
                  - ${{ if eq(deployment.destroy, true) }}:
                      - template: pipelines/terraform-destroy.yaml
                        parameters:
                          serviceConnection: ${{ deployment.serviceConnection }}
                          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                          variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                  - ${{ if eq(deployment.deploy, true) }}:
                      - template: pipelines/terraform-apply.yaml
                        parameters:
                          serviceConnection: ${{ deployment.serviceConnection }}
                          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                          variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                          ${{ if eq(deployment.local, true) }}:
                            parallelism: 2
          - ${{ if ne(deployment.playbook, '') }}:
              - ${{ if ne(deployment.addresses, '') }}:
                - job: CheckAnsibleHostsOnline
                  ${{ if and(eq(deployment.local, true), ne(deployment.envCheckStageName, '')) }}:
                    condition: and(succeeded(), eq(stageDependencies.${{ deployment.envCheckStageName }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                  pool:
                    ${{ if eq(deployment.local, true) }}:
                      name: Local
                    ${{ else }}:
                      vmImage: $(agentImage)
                  steps:
                    - template: pipelines/check-host-online.yaml
                      parameters:
                        addresses: ${{ deployment.addresses }}
              - job: AnsibleCheck
                ${{ if and(ne(deployment.addresses, ''), ne(deployment.envCheckStageName, '')) }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.${{ deployment.envCheckStageName }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                ${{ elseif ne(deployment.addresses, '') }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: Local
                  ${{ else }}:
                    vmImage: $(agentImage)
                ${{ if ne(deployment.addresses, '') }}:
                  dependsOn: CheckAnsibleHostsOnline
                steps:
                  - template: pipelines/ansible-check.yaml
                    parameters:
                      hostsFilePath: ansible/hosts/${{ deployment.environment }}/hosts.yaml
                      requirementsFile: ${{ deployment.requirementsFile }}
                      playbook: ${{ deployment.playbook }}
                      workingDirectory: ${{ deployment.workingDirectory }}
                      keyVaultName: bancey-vault
                      privateKeySecretName: Packer-Private-Key
                      serviceCOnnection: MSDN Sub
              - ${{ if ne(deployment.deploy, false) }}:
                - job: AnsibleRun
                  ${{ if and(ne(deployment.addresses, ''), ne(deployment.envCheckStageName, '')) }}:
                    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.${{ deployment.envCheckStageName }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                  ${{ elseif ne(deployment.addresses, '') }}:
                    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                  ${{ else }}:
                    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                  pool:
                    ${{ if eq(deployment.local, true) }}:
                      name: Local
                    ${{ else }}:
                      vmImage: $(agentImage)
                  ${{ if ne(deployment.addresses, '') }}:
                    dependsOn: CheckAnsibleHostsOnline
                  steps:
                    - template: pipelines/ansible-run.yaml
                      parameters:
                        hostsFilePath: ansible/hosts/${{ deployment.environment }}/hosts.yaml
                        requirementsFile: ${{ deployment.requirementsFile }}
                        playbook: ${{ deployment.playbook }}
                        workingDirectory: ${{ deployment.workingDirectory }}
                        keyVaultName: bancey-vault
                        privateKeySecretName: Packer-Private-Key
                        serviceCOnnection: MSDN Sub
