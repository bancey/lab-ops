---
- name: Install aptitude
  apt:
    name: aptitude
    state: latest
    update_cache: true
- name: Install required system packages
  ansible.builtin.apt:
    pkg: "{{ install_pkgs }}"
    state: latest
    update_cache: true
- name: Remove packages
  ansible.builtin.apt:
    pkg:
      - ufw
      - unattended-upgrades
    state: absent
    autoremove: true
- name: Upgrade all packages
  ansible.builtin.apt:
    name: "*"
    state: latest
- name: Get installed packages
  ansible.builtin.package_facts:
    manager: auto
- name: Remove snap packages
  ansible.builtin.command: snap remove {{ item }}
  loop: ["lxd", "core20", "snapd"]
  when: "'snapd' in ansible_facts.packages"
- name: Remove snap
  ansible.builtin.apt:
    name: snapd
    state: absent
    autoremove: true
- name: Set timezone
  community.general.timezone:
    name: "Europe/London"
- name: Disable multipathd service
  ansible.builtin.systemd:
    name: multipathd
    enabled: false
    state: stopped
    masked: true
  when: disable_multipath
- name: Configure inotify limits for Kubernetes
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: true
    reload: true
  loop:
    - { name: 'fs.inotify.max_user_watches', value: '524288' }
    - { name: 'fs.inotify.max_user_instances', value: '512' }
    - { name: 'fs.file-max', value: '2097152' }
- name: Configure file descriptor limits
  community.general.pam_limits:
    domain: '*'
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
  loop:
    - { limit_type: 'soft', limit_item: 'nofile', value: '65536' }
    - { limit_type: 'hard', limit_item: 'nofile', value: '65536' }
    - { limit_type: 'soft', limit_item: 'nproc', value: '65536' }
    - { limit_type: 'hard', limit_item: 'nproc', value: '65536' }
- name: Reboot hosts one at a time
  when: reboot_hosts
  throttle: 1
  block:
    - name: Reboot host
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible prep role"
        connect_timeout: 5
        reboot_timeout: "{{ reboot_timeout }}"
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
    - name: Wait for host to come back online
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: "{{ reboot_timeout }}"
