parameters:
  - name: hostsFilePath
    type: string
  - name: requirementsFile
    type: string
    default: ""
  - name: playbook
    type: string
  - name: keyVaultName
    type: string
  - name: privateKeySecretName
    type: string
  - name: serviceConnection
    type: string
  - name: secrets
    type: object
    default: {}

steps:
  - ${{ each secret in parameters.secrets }}:
    - task: AzureCLI@2
      displayName: Download ${{ secret }}
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: "bash"
        addSpnToEnvironment: true
        scriptLocation: "inlineScript"
        inlineScript: az keyvault secret download --name ${{ secret }} --vault-name ${{ parameters.keyVaultName }} --file ${{ secret }}
        workingDirectory: $(System.DefaultWorkingDirectory)/ansible
  - task: AzureCLI@2
    displayName: Check Ansible Playbook
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: "bash"
      addSpnToEnvironment: true
      scriptLocation: "inlineScript"
      inlineScript: |
        az keyvault secret download --name ${{ parameters.privateKeySecretName }} --vault-name ${{ parameters.keyVaultName }} --file $(Build.StagingDirectory)/id_rsa
        chmod 600 $(Build.StagingDirectory)/id_rsa
        eval `ssh-agent -s`
        ssh-add $(Build.StagingDirectory)/id_rsa
        REQUIREMENTS_FILE="${{ parameters.requirementsFile }}"
        echo "Requirements file: $REQUIREMENTS_FILE"

        if [ ! -z "$REQUIREMENTS_FILE" ]; then
          ansible-galaxy install -r $REQUIREMENTS_FILE
        fi

        ansible-playbook --syntax-check --inventory $(System.DefaultWorkingDirectory)/${{ parameters.hostsFilePath }} ${{ parameters.playbook }} --extra-vars "$EXTRA_VARS"
        ansible-playbook --check --inventory $(System.DefaultWorkingDirectory)/${{ parameters.hostsFilePath }} ${{ parameters.playbook }} --extra-vars "$EXTRA_VARS"
      workingDirectory: $(System.DefaultWorkingDirectory)/ansible
