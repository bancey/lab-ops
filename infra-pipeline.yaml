trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - terraform
      - ansible
      - pipelines/terraform-*.yaml
      - pipelines/ansible-*.yaml
      - infra-pipeline.yaml

pr:
  - master

parameters:
  - name: local_environments
    type: object
    default:
      - name: wanda
        address: "wanda.heimelska.co.uk"
      - name: thanos
        address: "thanos.heimelska.co.uk"
      - name: hela
        address: "hela.heimelska.co.uk"
      - name: loki
        address: "loki.heimelska.co.uk"
      - name: thor
        address: "thor.heimelska.co.uk"
  - name: environment_components
    type: object
    default:
      - deployment: virtual_machines
        environment: prod
        component: virtual-machines
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
      - deployment: tiny_virtual_machines
        environment: prod
        component: virtual-machines
        serviceConnection: "MSDN Sub"
        storageAccount: tiny523c690a628b4700
        destroy: false
        deploy: true
        local: false
        dependsOn:
          - CheckEnvIsOnline_hela
          - CheckEnvIsOnline_loki
          - CheckEnvIsOnline_thor
      - deployment: k8s_infra
        environment: prod
        component: kubernetes
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: false
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
      - deployment: k8s_ansible
        environment: prod
        envCheckStageName: CheckEnvIsOnline_wanda
        playbook: k3s-wanda.yaml
        requirementsFile: requirements.yml
        addresses: "10.151.15.8,10.151.15.16,10.151.15.17,10.151.15.18,10.151.15.19"
        deploy: false
        extraVars: "run_prep=true run_install=true"
        local: true
        demands:
          - KUBERNETES_SERVICE_HOST
        dependsOn:
          - CheckEnvIsOnline_wanda
          - k8s_infra
      #- deployment: nuc_k8s_ansible
      #  environment: prod
      #  playbook: k3s-nuc.yaml
      #  requirementsFile: requirements.yml
      #  addresses: "10.151.16.8,10.151.16.16,10.151.16.17"
      #  deploy: false
      #  extraVars: "run_prep=true run_install=true"
      #  local: true
      #  demands:
      #    - accessible
      #  dependsOn: []
      - deployment: thanos_ansible
        environment: prod
        playbook: thanos.yaml
        addresses: "10.151.14.5"
        envCheckStageName: CheckEnvIsOnline_thanos
        local: true
        demands:
          - KUBERNETES_SERVICE_HOST
        dependsOn:
          - CheckEnvIsOnline_thanos
      - deployment: prod_dns
        environment: prod
        component: dns
        serviceConnection: "MSDN Sub"
        storageAccount: dns175090c1a7c944d1
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: test_gameserver
        environment: test
        component: gameserver
        serviceConnection: "MSDN Sub"
        storageAccount: gamec96560353b1a4d1a
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: prod_gameserver
        environment: prod
        component: gameserver
        serviceConnection: "MSDN Sub"
        storageAccount: gamec96560353b1a4d1a
        destroy: false
        deploy: true
        dependsOn:
          - test_gameserver
      - deployment: prod_twingate
        environment: prod
        component: twingate
        serviceConnection: "MSDN Sub"
        storageAccount: twingate959ba0d66209
        destroy: false
        deploy: true
        dependsOn: []

variables:
  - name: agentImage
    value: ubuntu-latest

stages:
  - ${{ each env in parameters.local_environments }}:
      - stage: CheckEnvIsOnline_${{ env.name }}
        dependsOn: []
        jobs:
          - job: CheckEnvIsOnline
            pool:
              vmImage: $(agentImage)
            steps:
              - template: pipelines/connect.yaml
                parameters:
                  keyVaultName: bancey-vault
                  serviceKeySecretName: Twingate-AzureDevOps-SA-Key
                  serviceConnection: MSDN Sub
              - template: pipelines/check-host-online.yaml
                parameters:
                  addresses: ${{ env.address }}
  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        jobs:
          - ${{ if ne(deployment.component, '') }}:
              - job: TerraformPlan
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  vmImage: $(agentImage)
                steps:
                  - ${{ if eq(deployment.local, true) }}:
                    - template: pipelines/connect.yaml
                      parameters:
                        keyVaultName: bancey-vault
                        serviceKeySecretName: Twingate-AzureDevOps-SA-Key
                        serviceConnection: MSDN Sub
                  - template: pipelines/terraform-init.yaml
                    parameters:
                      storageAccount: ${{ deployment.storageAccount}}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      azureRmKey: ${{ deployment.deployment }}
                  - template: pipelines/terraform-plan.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                      ${{ if eq(deployment.deployment, 'tiny_virtual_machines') }}:
                        extraCommandArgs: "-var target_nodes=[\"hela\",\"loki\",\"thor\"]"
              - job: TerraformApply
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  vmImage: $(agentImage)
                steps:
                  - ${{ if eq(deployment.local, true) }}:
                    - template: pipelines/connect.yaml
                      parameters:
                        keyVaultName: bancey-vault
                        serviceKeySecretName: Twingate-AzureDevOps-SA-Key
                        serviceConnection: MSDN Sub
                  - template: pipelines/terraform-init.yaml
                    parameters:
                      storageAccount: ${{ deployment.storageAccount}}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      azureRmKey: ${{ deployment.deployment }}
                  - ${{ if eq(deployment.destroy, true) }}:
                      - template: pipelines/terraform-destroy.yaml
                        parameters:
                          serviceConnection: ${{ deployment.serviceConnection }}
                          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                          variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                  - ${{ if eq(deployment.deploy, true) }}:
                      - template: pipelines/terraform-apply.yaml
                        parameters:
                          serviceConnection: ${{ deployment.serviceConnection }}
                          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                          variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                          ${{ if eq(deployment.local, true) }}:
                            parallelism: 1
          - ${{ if ne(deployment.playbook, '') }}:
              - ${{ if ne(deployment.addresses, '') }}:
                  - job: CheckAnsibleHostsOnline
                    ? ${{ if and(eq(deployment.local, true), ne(deployment.envCheckStageName, '')) }}
                    : condition: and(succeeded(), eq(stageDependencies.${{ deployment.envCheckStageName }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                    pool:
                      vmImage: $(agentImage)
                    steps:
                      - template: pipelines/check-host-online.yaml
                        parameters:
                          addresses: ${{ deployment.addresses }}
              - job: AnsibleCheck
                ? ${{ if and(ne(deployment.addresses, ''), ne(deployment.envCheckStageName, '')) }}
                : condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.${{ deployment.envCheckStageName }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                ${{ elseif ne(deployment.addresses, '') }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  vmImage: $(agentImage)
                ${{ if ne(deployment.addresses, '') }}:
                  dependsOn: CheckAnsibleHostsOnline
                steps:
                  - template: pipelines/connect.yaml
                    parameters:
                      keyVaultName: bancey-vault
                      serviceKeySecretName: Twingate-AzureDevOps-SA-Key
                      serviceConnection: MSDN Sub
                  - template: pipelines/ansible-check.yaml
                    parameters:
                      hostsFilePath: ansible/hosts.yaml
                      requirementsFile: ${{ deployment.requirementsFile }}
                      playbook: ${{ deployment.playbook }}
                      workingDirectory: ${{ deployment.workingDirectory }}
                      keyVaultName: bancey-vault
                      privateKeySecretName: Packer-Private-Key
                      serviceCOnnection: MSDN Sub
                      extraVars: ${{ deployment.extraVars }}
              - ${{ if ne(deployment.deploy, false) }}:
                  - job: AnsibleRun
                    ? ${{ if and(ne(deployment.addresses, ''), ne(deployment.envCheckStageName, '')) }}
                    : condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.${{ deployment.envCheckStageName }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                    ${{ elseif ne(deployment.addresses, '') }}:
                      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(dependencies.CheckAnsibleHostsOnline.outputs['checkOnline.online'], 'true'))
                    ${{ else }}:
                      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                    pool:
                      ${{ if eq(deployment.local, true) }}:
                        name: Local
                        ${{ if ne(deployment.demands, '') }}:
                          demands: ${{ deployment.demands }}
                      ${{ else }}:
                        vmImage: $(agentImage)
                    ${{ if ne(deployment.addresses, '') }}:
                      dependsOn: CheckAnsibleHostsOnline
                    steps:
                      - template: pipelines/ansible-run.yaml
                        parameters:
                          hostsFilePath: ansible/hosts.yaml
                          requirementsFile: ${{ deployment.requirementsFile }}
                          playbook: ${{ deployment.playbook }}
                          workingDirectory: ${{ deployment.workingDirectory }}
                          keyVaultName: bancey-vault
                          privateKeySecretName: Packer-Private-Key
                          serviceCOnnection: MSDN Sub
                          extraVars: ${{ deployment.extraVars }}
