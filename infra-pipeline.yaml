trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - terraform
      - ansible
      - pipelines/terraform-*.yaml
      - infra-pipeline.yaml

pr:
  - master

parameters:
  - name: local_environments
    type: object
    default:
      - name: wanda
        address: "192.168.80.11"
  - name: environment_components
    type: object
    default:
      - deployment: dns
        environment: dns
        component: dns
        serviceConnection: "MSDN Sub"
        storageAccount: dns175090c1a7c944d1
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: az_prod_gameserver
        environment: az-prod
        component: gameserver
        serviceConnection: "MSDN Sub"
        storageAccount: gamec96560353b1a4d1a
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: virtual_machines
        environment: wanda
        component: virtual-machines
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
      - deployment: pteronode_ansible
        environment: wanda
        playbook: wings-node.yaml
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
          - virtual_machines
      - deployment: k8s_infra
        environment: wanda
        component: kubernetes
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
      - deployment: k8s_ansible
        environment: wanda
        playbook: site.yml
        workingDirectory: ansible/k3s
        requirementsFile: collections/requirements.yml
        local: true
        dependsOn:
          - CheckEnvIsOnline_wanda
          - k8s_infra

variables:
  - name: agentImage
    value: ubuntu-20.04
  - name: terraformVersion
    value: 1.3.6

stages:
  - ${{ each env in parameters.local_environments }}:
      - stage: CheckEnvIsOnline_${{ env.name }}
        dependsOn: []
        jobs:
          - job: CheckEnvIsOnline
            pool:
              name: SelfHostedDocker
            steps:
              - script: |
                  if nc -z ${{ env.address }} 22 2>/dev/null; then
                    echo "${{ env.address }} ✓"
                    echo "##vso[task.setvariable variable=online;isOutput=true]true"
                  else
                    echo "${{ env.address }} ✗"
                    echo "##vso[task.setvariable variable=online;isOutput=true]false"
                  fi
                name: checkOnline
  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        jobs:
          - ${{ if ne(deployment.component, '') }}:
              - job: TerraformPlan
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: SelfHostedDocker
                  ${{ else }}:
                    vmImage: $(agentImage)
                steps:
                  - template: pipelines/terraform-init.yaml
                    parameters:
                      terraformVersion: $(terraformVersion)
                      storageAccount: ${{ deployment.storageAccount}}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      azureRmKey: ${{ deployment.deployment }}
                      ${{ if eq(deployment.local, true) }}:
                        downloadUrl: "https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_arm64.zip"
                  - template: pipelines/terraform-plan.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
              - job: TerraformApply
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: SelfHostedDocker
                  ${{ else }}:
                    vmImage: $(agentImage)
                steps:
                  - template: pipelines/terraform-init.yaml
                    parameters:
                      terraformVersion: $(terraformVersion)
                      storageAccount: ${{ deployment.storageAccount}}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      azureRmKey: ${{ deployment.deployment }}
                      ${{ if eq(deployment.local, true) }}:
                        downloadUrl: "https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_arm64.zip"
                  - ${{ if eq(deployment.destroy, true) }}:
                      - template: pipelines/terraform-destroy.yaml
                        parameters:
                          serviceConnection: ${{ deployment.serviceConnection }}
                          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                          variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                  - ${{ if eq(deployment.deploy, true) }}:
                      - template: pipelines/terraform-apply.yaml
                        parameters:
                          serviceConnection: ${{ deployment.serviceConnection }}
                          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                          variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                          ${{ if eq(deployment.local, true) }}:
                            parallelism: 2
          - ${{ if ne(deployment.playbook, '') }}:
              - job: AnsibleCheck
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: SelfHostedDocker
                  ${{ else }}:
                    vmImage: $(agentImage)
                steps:
                  - checkout: self
                    submodules: true
                  - task: AzureKeyVault@2
                    inputs:
                      azureSubscription: "MSDN Sub"
                      KeyVaultName: "bancey-vault"
                      SecretsFilter: "*"
                      RunAsPreJob: false
                  - task: replacetokens@3
                    displayName: "Populate host.yaml with values from KeyVault"
                    inputs:
                      targetFiles: $(System.DefaultWorkingDirectory)/ansible/hosts.yaml
                      encoding: auto
                      writeBOM: true
                      actionOnMissing: fail
                      keepToken: true
                      tokenPrefix: $(
                      tokenSuffix: )
                      useLegacyPattern: false
                      enableTransforms: false
                      enableTelemetry: false
                  - task: AzureCLI@2
                    displayName: Check Ansible Playbooks
                    inputs:
                      azureSubscription: "MSDN Sub"
                      scriptType: "bash"
                      scriptLocation: "inlineScript"
                      inlineScript: |
                        az keyvault secret download --name Packer-Private-Key --vault-name bancey-vault --file $(Build.StagingDirectory)/id_rsa
                        chmod 600 $(Build.StagingDirectory)/id_rsa
                        eval `ssh-agent -s`
                        ssh-add $(Build.StagingDirectory)/id_rsa
                        
                        REQUIREMENTS_FILE="${{ deployment.requirementsFile }}"
                        echo "Requirements file: $REQUIREMENTS_FILE"

                        if [ ! -z "$REQUIREMENTS_FILE" ]; then
                            ansible-galaxy install -r $REQUIREMENTS_FILE
                        fi

                        ansible-playbook --syntax-check --inventory $(System.DefaultWorkingDirectory)/ansible/hosts.yaml ${{ deployment.playbook }}
                        ansible-playbook --check --inventory $(System.DefaultWorkingDirectory)/ansible/hosts.yaml ${{ deployment.playbook }}
                      ${{ if ne(deployment.workingDirectory, '') }}:
                        workingDirectory: $(System.DefaultWorkingDirectory)/${{ deployment.workingDirectory }}
                      ${{ else }}:
                        workingDirectory: $(System.DefaultWorkingDirectory)/ansible
              - job: AnsibleRun
                ${{ if eq(deployment.local, true) }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(stageDependencies.CheckEnvIsOnline_${{ deployment.environment }}.CheckEnvIsOnline.outputs['checkOnline.online'], 'true'))
                ${{ else }}:
                  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                pool:
                  ${{ if eq(deployment.local, true) }}:
                    name: SelfHostedDocker
                  ${{ else }}:
                    vmImage: $(agentImage)
                steps:
                  - checkout: self
                    submodules: true
                  - task: AzureKeyVault@2
                    inputs:
                      azureSubscription: "MSDN Sub"
                      KeyVaultName: "bancey-vault"
                      SecretsFilter: "*"
                      RunAsPreJob: false
                  - task: replacetokens@3
                    displayName: "Populate host.yaml with values from KeyVault"
                    inputs:
                      targetFiles: $(System.DefaultWorkingDirectory)/ansible/hosts.yaml
                      encoding: auto
                      writeBOM: true
                      actionOnMissing: fail
                      keepToken: true
                      tokenPrefix: $(
                      tokenSuffix: )
                      useLegacyPattern: false
                      enableTransforms: false
                      enableTelemetry: false
                  - task: AzureCLI@2
                    displayName: Run Ansible
                    inputs:
                      azureSubscription: "MSDN Sub"
                      scriptType: "bash"
                      scriptLocation: "inlineScript"
                      inlineScript: |
                        az keyvault secret download --name Packer-Private-Key --vault-name bancey-vault --file $(Build.StagingDirectory)/id_rsa
                        chmod 600 $(Build.StagingDirectory)/id_rsa
                        eval `ssh-agent -s`
                        ssh-add $(Build.StagingDirectory)/id_rsa
                        
                        REQUIREMENTS_FILE="${{ deployment.requirementsFile }}"
                        echo "Requirements file: $REQUIREMENTS_FILE"

                        if [ ! -z "$REQUIREMENTS_FILE" ]; then
                            ansible-galaxy install -r $REQUIREMENTS_FILE
                        fi

                        ansible-playbook --syntax-check --inventory $(System.DefaultWorkingDirectory)/ansible/hosts.yaml ${{ deployment.playbook }}
                        ansible-playbook --check --inventory $(System.DefaultWorkingDirectory)/ansible/hosts.yaml ${{ deployment.playbook }}
                      ${{ if ne(deployment.workingDirectory, '') }}:
                        workingDirectory: $(System.DefaultWorkingDirectory)/${{ deployment.workingDirectory }}
                      ${{ else }}:
                        workingDirectory: $(System.DefaultWorkingDirectory)/ansible
