trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - terraform
      - ansible
      - pipelines/terraform-*.yaml
      - pipelines/ansible-*.yaml
      - infra-pipeline.yaml

pr:
  - master

parameters:
  - name: local_environments
    type: object
    default:
      - name: wanda
        address: "wanda.heimelska.co.uk"
      - name: thanos
        address: "thanos.heimelska.co.uk"
      - name: gamora
        address: "gamora.heimelska.co.uk"        
      - name: hela
        address: "hela.heimelska.co.uk"
      - name: loki
        address: "loki.heimelska.co.uk"
      - name: thor
        address: "thor.heimelska.co.uk"
  - name: terraform_deployments
    type: object
    default:
      - deployment: prod_twingate
        environment: prod
        component: twingate
        serviceConnection: "MSDN Sub"
        storageAccount: twingate959ba0d66209
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: virtual_machines
        environment: prod
        component: virtual-machines
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        extraCommandArgs: -var "target_nodes=[\"wanda\"]"
        destroy: false
        deploy: true
        localEnvironments:
          - wanda
        dependsOn:
          - GenerateAnsibleInventory
      - deployment: tiny_virtual_machines
        environment: prod
        component: virtual-machines
        serviceConnection: "MSDN Sub"
        storageAccount: tiny523c690a628b4700
        extraCommandArgs: -var "target_nodes=[\"hela\",\"loki\",\"thor\"]"
        destroy: false
        deploy: true
        localEnvironments:
          - hela
          - loki
          - thor
        dependsOn:
          - GenerateAnsibleInventory
      - deployment: prod_dns
        environment: prod
        component: dns
        serviceConnection: "MSDN Sub"
        storageAccount: dns175090c1a7c944d1
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: test_gameserver
        environment: test
        component: gameserver
        serviceConnection: "MSDN Sub"
        storageAccount: gamec96560353b1a4d1a
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: prod_gameserver
        environment: prod
        component: gameserver
        serviceConnection: "MSDN Sub"
        storageAccount: gamec96560353b1a4d1a
        destroy: false
        deploy: true
        dependsOn:
          - test_gameserver
  - name: ansible_deployments
    type: object
    default:
      - deployment: rpi_ansible
        environment: prod
        playbook: rpi-ha.yaml
        localEnvironments:
          - hela
          - loki
          - thor
        dependsOn:
          - GenerateAnsibleInventory

variables:
  - name: agentImage
    value: ubuntu-latest

stages:
  - stage: GenerateAnsibleInventory
    dependsOn: []
    jobs:
      - job: GenerateAnsibleInventory
        pool:
          vmImage: $(agentImage)
        steps:
          - template: pipelines/terraform-init.yaml
            parameters:
              storageAccount: inventory50fc6b4d73a
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/inventory
              azureRmKey: prod_inventory
          - template: pipelines/terraform-plan.yaml
            parameters:
              serviceConnection: "MSDN Sub"
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/inventory
              variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/prod/prod.tfvars
          - template: pipelines/terraform-apply.yaml
            parameters:
              serviceConnection: "MSDN Sub"
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/inventory
              variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/prod/prod.tfvars
          - publish: $(System.DefaultWorkingDirectory)/ansible/hosts.yaml
            artifact: ansible
  - stage: CheckHostsOnline
    dependsOn: prod_twingate
    jobs:
      - job: CheckHostsOnline
        pool:
          vmImage: $(agentImage)
        steps:
          - template: pipelines/connect.yaml
            parameters:
              keyVaultName: bancey-vault
              serviceKeySecretName: Twingate-AzureDevOps-SA-Key
              serviceConnection: MSDN Sub
          - script: sudo apt install ssh-tools
            displayName: 'Install ssh-tools'
          - ${{ each env in parameters.local_environments }}:
            - template: pipelines/check-host-online.yaml
              parameters:
                name: ${{ env.name }}
                addresses: ${{ env.address }}
  - ${{ each deployment in parameters.terraform_deployments }}:
      - stage: ${{ deployment.deployment }}
        ${{ if and(deployment.localEnvironments, gt(length(join('', deployment.dependsOn)), 0)) }}:
          dependsOn: ${{ split(format('{0},{1}', join(',', deployment.dependsOn), 'CheckHostsOnline'), ',') }}
        ${{ elseif deployment.localEnvironments }}:
          dependsOn: CheckHostsOnline
        ${{ else }}:
          dependsOn: ${{ deployment.dependsOn }}
        ${{ if deployment.localEnvironments }}:
          condition: and(succeeded(), eq(stageDependencies.CheckHostsOnline.outputs['CheckHostsOnline.checkOnline_${{ deployment.localEnvironments[0] }}.online'], 'true'))
        ${{ else }}:
          condition: succeeded()
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: $(agentImage)
            steps:
              - ${{ if deployment.localEnvironments }}:
                - template: pipelines/connect.yaml
                  parameters:
                    keyVaultName: bancey-vault
                    serviceKeySecretName: Twingate-AzureDevOps-SA-Key
                    serviceConnection: MSDN Sub
              - ${{ if eq(deployment.component, 'virtual-machines') }}:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Ansible Inventory'
                  inputs:
                    artifactName: 'ansible'
                    targetPath: $(System.DefaultWorkingDirectory)/ansible
                    itemPattern: hosts.yaml
              - template: pipelines/terraform-init.yaml
                parameters:
                  storageAccount: ${{ deployment.storageAccount}}
                  workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                  azureRmKey: ${{ deployment.deployment }}
              - template: pipelines/terraform-plan.yaml
                parameters:
                  serviceConnection: ${{ deployment.serviceConnection }}
                  workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                  variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                  ${{ if ne(deployment.extraCommandArgs, '') }}:
                    extraCommandArgs: ${{ deployment.extraCommandArgs }}
              - ${{ if and(eq(deployment.destroy, true), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
                  - template: pipelines/terraform-destroy.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
              - ${{ if and(eq(deployment.deploy, true), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
                  - template: pipelines/terraform-apply.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
  - ${{ each ansible_deployment in parameters.ansible_deployments }}:
      - stage: ${{ ansible_deployment.deployment }}
        ${{ if and(ansible_deployment.localEnvironments, gt(length(join('', ansible_deployment.dependsOn)), 0)) }}:
          dependsOn: ${{ split(format('{0},{1}', join(',', ansible_deployment.dependsOn), 'CheckHostsOnline'), ',') }}
        ${{ elseif ansible_deployment.localEnvironments }}:
          dependsOn: CheckHostsOnline
        ${{ else }}:
          dependsOn: ${{ ansible_deployment.dependsOn }}
        ${{ if ansible_deployment.localEnvironments }}:
          condition: and(succeeded(), eq(stageDependencies.CheckHostsOnline.outputs['CheckHostsOnline.checkOnline_${{ ansible_deployment.localEnvironments[0] }}.online'], 'true'))
        ${{ else }}:
          condition: succeeded()
        jobs:
          - job: AnsibleCheckRun
            pool:
              vmImage: $(agentImage)
            steps:
              - template: pipelines/connect.yaml
                parameters:
                  keyVaultName: bancey-vault
                  serviceKeySecretName: Twingate-AzureDevOps-SA-Key
                  serviceConnection: MSDN Sub
              - task: DownloadPipelineArtifact@2
                displayName: 'Download Ansible Inventory'
                inputs:
                  artifactName: 'ansible'
                  targetPath: $(System.DefaultWorkingDirectory)/ansible
                  itemPattern: hosts.yaml
              - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
                - template: pipelines/ansible-check.yaml
                  parameters:
                    hostsFilePath: ansible/hosts.yaml
                    requirementsFile: ${{ ansible_deployment.requirementsFile }}
                    playbook: ${{ ansible_deployment.playbook }}
                    keyVaultName: bancey-vault
                    privateKeySecretName: Packer-Private-Key
                    serviceCOnnection: MSDN Sub
              - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
                - template: pipelines/ansible-run.yaml
                  parameters:
                    hostsFilePath: ansible/hosts.yaml
                    requirementsFile: ${{ ansible_deployment.requirementsFile }}
                    playbook: ${{ ansible_deployment.playbook }}
                    keyVaultName: bancey-vault
                    privateKeySecretName: Packer-Private-Key
                    serviceCOnnection: MSDN Sub
